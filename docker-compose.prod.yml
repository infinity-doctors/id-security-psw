version: '3.8'

services:
  # Redis para OTS
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --save 60 1
    volumes:
      - redis_data:/data
    networks:
      - ots-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend One-Time Secret oficial
  ots-backend:
    image: pglombardo/one-time-secret:latest
    environment:
      - OTS_SECRET=${OTS_SECRET:-your-secret-key-change-this-in-production}
      - OTS_HOST=0.0.0.0
      - OTS_PORT=7143
      - REDIS_URL=redis://redis:6379
      - OTS_DOMAIN=${OTS_DOMAIN:-localhost:3000}
      - OTS_SSL=false
    ports:
      - "127.0.0.1:${OTS_BACKEND_PORT:-7143}:7143"
    depends_on:
      - redis
    networks:
      - ots-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:7143/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend personalizado
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        NODE_ENV: production
    environment:
      - NODE_ENV=production
      - OTS_API_URL=http://ots-backend:7143
      - PORT=3000
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      ots-backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ots-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

volumes:
  redis_data:
    driver: local

networks:
  ots-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 